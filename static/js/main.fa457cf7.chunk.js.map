{"version":3,"sources":["components/Navbar.js","components/Textform.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggle","htmlFor","defaultProps","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","hello","rows","value","onChange","event","target","onInput","count","split","document","getElementById","i","length","innerHTML","backgroundColor","placeholder","newtext","toUpperCase","showalert","toLowerCase","select","execCommand","About","padding","mystyle","setstyle","_useState3","_useState4","btntext","setbtntext","aria-labelledby","data-bs-parent","Alert","alert","msg","App","setmode","setalert","message","setTimeout","components_Navbar","body","components_Alert","components_Textform","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.fa457cf7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nfunction Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        \r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\"  href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/about\">\r\n                About\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <div className=\"form-check form-switch\">\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onClick={props.toggle}\r\n            />\r\n            <label\r\n              className={`form-check-label text-${\r\n                props.mode === \"light\" ? \"dark\" : \"light\"\r\n              }`}\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              Enable DarkMode\r\n            </label>\r\n          </div>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here \",\r\n};\r\n\r\nexport default Navbar;","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Textform=(props)=> {\r\n  const [text, setText] = useState(\"\");\r\n  const handleupclick = () => {\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext)\r\n    props.showalert(\"Text Converted to Uppercase\" ,\"success\")\r\n  };\r\n  const handleonchange = (event) => {\r\n    setText(event.target.value)\r\n    };\r\n  const wordcount =() =>{\r\n    let words = document.getElementById(\"exampleFormControlTextarea1\").value;\r\n    let count = 0;\r\n    let split = words.split(' ');\r\n    for (let i = 0; i < split.length; i++) {\r\n      if (split[i] != \"\") \r\n      {\r\n          count += 1;\r\n      }\r\n  }\r\n    document.getElementById(\"show\").innerHTML = count;\r\n  }\r\n  const handlelower = () => {\r\n    let hello = text.toLowerCase();\r\n    setText(hello)\r\n    props.showalert(\"Converted to Lowercase\" ,\"success\")\r\n  }\r\n  const handleclear = () => {\r\n    let hello = '';\r\n    setText(hello)\r\n    props.showalert(\"Text Cleared\" ,\"success\")\r\n  }\r\n  const copy = () => {\r\n    let textarea = document.getElementById(\"exampleFormControlTextarea1\");\r\n    textarea.select();\r\n    document.execCommand(\"copy\");\r\n    props.showalert(\"Text Copied\" ,\"success\")\r\n  }\r\n  return (\r\n    <div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#000'}}>\r\n        <h1>{props.hello}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleonchange}\r\n            onInput={wordcount}\r\n            style={{backgroundColor:props.mode==='dark'?'grey':'white' ,color:props.mode==='dark'?'white':'#000'}}\r\n            placeholder='Enter Your Text Here'\r\n          ></textarea>\r\n        </div>\r\n        <button onClick={handleupclick} className=\"btn btn-primary\">\r\n          Convert to Uppercase\r\n        </button>\r\n        <button onClick={handlelower} className=\"btn btn-primary mx-2\">\r\n          Convert to Lowercase\r\n        </button>\r\n        <button onClick={copy} className=\"btn btn-primary mx-2\">\r\n          Copy Text\r\n        </button>\r\n        <button onClick={handleclear} className=\"btn btn-primary mx-2\">\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color:props.mode==='dark'?'white':'#000'}}>\r\n        <h1>Your Text Summary</h1>\r\n        <p>Your Text Includes <span id=\"show\">0</span>  Words and {text.length} Characters</p>\r\n        <h2>\r\n          Preview\r\n        </h2>\r\n        <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTextform.propTypes = {\r\n  hello: PropTypes.string,\r\n  text: PropTypes.string,\r\n};\r\n\r\nexport default Textform;\r\n","import React, {useState} from \"react\";\r\n\r\nexport default function About() {\r\n  const[mystyle , setstyle]= useState({\r\n    backgroundColor:'white',\r\n    color:'black', \r\n    padding:'20px',\r\n})\r\n    const[btntext, setbtntext] = useState('Enable Dark Mode')\r\n    const darkenable = () =>{\r\n        if(mystyle.color === 'black'){\r\n            setstyle({\r\n                backgroundColor:'black',\r\n                color:'white', \r\n                padding:'20px'\r\n            })\r\n            setbtntext(\"Enable Light Mode\")    \r\n        }    \r\n        else{\r\n            setstyle({\r\n                backgroundColor:'white',\r\n                color:'black',  \r\n            })\r\n            setbtntext(\"Enable Dark Mode\")\r\n        }  \r\n    }\r\n  return (\r\n    <div >\r\n      <div className=\"container my-3\" style={mystyle}>\r\n        <div className=\"accordion \" id=\"accordionExample\">\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\" >\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n                style={mystyle}\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classNamees that we use to style each element. These classNamees\r\n                control the overall appearance, as well as the showing and\r\n                hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n                style={mystyle}\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the\r\n                showing and hiding via CSS transitions. You can modify any of\r\n                this with custom CSS or overriding our default variables. It's\r\n                also worth noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\"\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\" style={mystyle}\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={mystyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classNamees that we use to style each element. These\r\n                classNamees control the overall appearance, as well as the\r\n                showing and hiding via CSS transitions. You can modify any of\r\n                this with custom CSS or overriding our default variables. It's\r\n                also worth noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <button onClick={darkenable} type=\"button\" className=\"btn btn-primary my-3\">{btntext}</button> \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n    props.alert &&\r\n    <div>\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\" \r\n      >\r\n        <strong>{props.alert.msg}</strong> \r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"btn-close\"\r\n          data-bs-dismiss=\"alert\"\r\n          aria-label=\"Close\"\r\n        ></button> */}\r\n      </div>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\nimport About from \"./components/About\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import {\n//   BrowserRouter as Router,\n//   Route,\n//   Routes\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");\n  const [alert, setalert] = useState(null);\n\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 3000);\n  };\n  const toggle = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.body.style.backgroundColor = \"grey\";\n      showalert(\"Dark Mode has been enabled\", \"success\");\n      document.title = \"Text Utility - Dark Mode\";\n    } \n    else {\n      setmode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showalert(\"Light Mode has been enabled\", \"success\");\n      document.title = \"Text Utility - Light Mode\";\n    }\n  };\n  return (\n    <div className=\"App\">\n      {/* <Router> */}\n      <Navbar title=\"Text-Utility\" mode={mode} toggle={toggle} />\n      <Alert alert={alert} />\n      <Textform\n        showalert={showalert}\n        mode={mode}\n        hello=\"Please Enter Your Text To Uppercase\"\n      />\n      <About />\n\n      {/* Routers Starts Here  */}\n   \n        {/* <Routes>\n          <Route exact\n            path=\"/\"\n            element={\n              <Textform\n                showalert={showalert}\n                mode={mode}\n                hello=\"Please Enter Your Text To Uppercase\"\n              />\n            }\n          />\n\n          <Route exact path=\"/about\" element={<About />} />\n        </Routes>\n      </Router> */}\n      {/* Routers Ends Here */}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}